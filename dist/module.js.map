{"mappings":"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","sources":["src/index.ts","src/create-functions.ts","src/types.ts","src/main.ts"],"sourcesContent":["export * from './create-functions'\nexport * from './main'\nexport * from './types'\n","import {EffectTags, FiberNode, NodeTypes} from './types'\n\n/**\n * Creating node containing only text\n * @param {string} text - text content for HTMLElement\n * @return {FiberNode} text node\n */\nexport function createTextNode(text: string): FiberNode {\n    const textNode: FiberNode = {\n        type: NodeTypes.textNode,\n        effectTag: EffectTags.create,\n        textValue: text,\n        children: [],\n    }\n    return textNode\n}\n\n/**\n *\n * @param {NodeTypes} type - type of node\n * @param {object} props - node properties\n * @param {Node[]} children - node children\n * @return {Node} - node instance\n */\nexport function createNode(\n    type: NodeTypes,\n    props: {[key: string]: any},\n    ...children: FiberNode[]\n): FiberNode {\n    const node: FiberNode = {\n        type,\n        props,\n        effectTag: EffectTags.create,\n        children: children.map(el =>\n            typeof el === 'string' ? createTextNode(el) : el\n        ),\n    }\n    return node\n}\n\n/**\n * Create DOM object from Node interface instance\n * @param {FiberNode} node - fiber node instance\n * @return {HTMLElement} domNode\n */\nexport function createDomNode(node: FiberNode): HTMLElement | Text {\n    if (node.type === NodeTypes.textNode && node.textValue) {\n        const textDomNode = document.createTextNode(node.textValue)\n        return textDomNode\n    }\n\n    const domNode = document.createElement(node.type)\n    if (node.props) {\n        Object.entries(node.props).map(([propName, propValue]) => {\n            // TODO: fix it\n            ;(domNode as any)[propName] = propValue\n        })\n    }\n\n    return domNode\n}\n","export enum NodeTypes {\n    // eslint-disable-next-line no-unused-vars\n    textNode = 'TEXT_NODE',\n    // eslint-disable-next-line no-unused-vars\n    unitOfWork = 'UNIT_OF_WORK',\n}\n\n// how it looks like https://pomb.us/static/a88a3ec01855349c14302f6da28e2b0c/ac667/fiber1.png\nexport type FiberNode = {\n    type: NodeTypes\n    effectTag: EffectTags\n    dom?: HTMLElement | Text\n    props?: {\n        [key: string]: any\n    }\n    children: FiberNode[]\n    parent?: FiberNode\n    sibling?: FiberNode\n    previousCommittedRootNode?: FiberNode\n    textValue?: string\n}\n\nexport enum EffectTags {\n    // eslint-disable-next-line no-unused-vars\n    update = 'UPDATE',\n    // eslint-disable-next-line no-unused-vars\n    delete = 'DELETE',\n    // eslint-disable-next-line no-unused-vars\n    create = 'CREATE',\n}\n","import {createDomNode} from './create-functions'\nimport {EffectTags, FiberNode, NodeTypes} from './types'\n\nconst queue: FiberNode[] = []\nconst nodesToDeleteFromDom: FiberNode[] = []\nlet uncommitedRootNode: FiberNode | undefined = undefined\nlet currentRootNode: FiberNode | undefined = undefined\n// let counter = false\n\n// eslint-disable-next-line require-jsdoc\nfunction appendNodeToQueue(element: FiberNode, container: HTMLElement) {\n    uncommitedRootNode = {\n        // TODO: fix it\n        type: NodeTypes.unitOfWork,\n        dom: container,\n        effectTag: EffectTags.create,\n        children: element.children,\n        previousCommittedRootNode: currentRootNode,\n    }\n    const nextNode = uncommitedRootNode\n    queue.push(nextNode)\n}\n\n// eslint-disable-next-line require-jsdoc\nfunction workWithDom(node: FiberNode | undefined) {\n    if (!node || !node.parent) {\n        return\n    }\n    if (node.effectTag === EffectTags.create && node.dom) {\n        // TODO: check it\n        node.parent.dom!.appendChild(node.dom)\n    }\n    if (node.effectTag === EffectTags.delete) {\n        node.parent.dom!.removeChild(node.dom!)\n    }\n    if (node.effectTag === EffectTags.update) {\n        updateDomNode(node)\n    }\n    workWithDom(node.children[0])\n    workWithDom(node.sibling)\n}\n\nconst isEvent = (key: string) => key.startsWith('on')\nconst isProperty = (key: string) => key !== 'children'\nconst isNew =\n    (\n        prev: {[key: string]: any} | undefined,\n        next: {[key: string]: any} | undefined\n    ) =>\n    (key: string) =>\n        (prev && next && prev[key] !== next[key]) || (!prev && next)\nconst isGone = (next: {[key: string]: any} | undefined) => (key: string) =>\n    (next && !(key in next)) || !next\n// eslint-disable-next-line require-jsdoc\nfunction updateDomNode(node: FiberNode) {\n    const prevProps = node.previousCommittedRootNode!.props\n    const currentProps = node.props\n    if (prevProps) {\n        Object.keys(prevProps)\n            .filter(isEvent)\n            .filter(isNew(prevProps, currentProps))\n            .forEach(name => {\n                const eventType = name.toLowerCase().substring(2)\n                node.dom!.removeEventListener(eventType, prevProps[name])\n            })\n\n        Object.keys(prevProps)\n            .filter(isProperty)\n            .filter(isGone(currentProps))\n            .forEach(propName => ((node.dom as any)[propName] = ''))\n    }\n    if (currentProps) {\n        Object.keys(currentProps)\n            .filter(isProperty)\n            .filter(isNew(prevProps, currentProps))\n            .forEach(\n                propName =>\n                    ((node.dom as any)[propName] = currentProps[propName])\n            )\n\n        Object.keys(currentProps)\n            .filter(isEvent)\n            .filter(isNew(prevProps, currentProps))\n            .forEach(name => {\n                const eventType = name.toLowerCase().substring(2)\n                node.dom!.addEventListener(eventType, currentProps[name])\n            })\n    }\n}\n\n// eslint-disable-next-line require-jsdoc\nfunction runJobQueue(deadline: IdleDeadline) {\n    console.log('run')\n    let canRender = true\n    while (canRender && queue.length) {\n        const currentNode = queue[0]\n        queue.shift()\n        const nextNode = applyJob(currentNode)\n        if (nextNode) {\n            queue.push(nextNode)\n        }\n        canRender = deadline.timeRemaining() < 1\n    }\n\n    if (queue.length) {\n        requestIdleCallback(runJobQueue)\n    } else if (uncommitedRootNode) {\n        // we need add root node to DOM separately of creating DOM element\n        // because it can take more time that we want\n        nodesToDeleteFromDom.forEach(workWithDom)\n        if (uncommitedRootNode.children.length) {\n            workWithDom(uncommitedRootNode.children[0])\n        }\n        currentRootNode = uncommitedRootNode\n        uncommitedRootNode = undefined\n    }\n}\n\n// how it works: https://pomb.us/static/19c304dcb3824b14722691ded539ecdb/ac667/fiber4.png\n// eslint-disable-next-line require-jsdoc\nfunction applyJob(node: FiberNode) {\n    if (!node.dom) {\n        node.dom = createDomNode(node)\n    }\n    updateChildrenNode(node)\n\n    if (node.children.length) {\n        return node.children[0]\n    }\n\n    let nextNode = node\n    while (nextNode) {\n        if (nextNode.sibling) {\n            return nextNode.sibling\n        }\n        // TODO: fix it\n        nextNode = nextNode.parent!\n    }\n}\n\n// eslint-disable-next-line require-jsdoc\nfunction updateChildrenNode(node: FiberNode) {\n    const children = node.children\n    let index = 0\n    let prevSibling: FiberNode | undefined\n    let committedNode: FiberNode | undefined =\n        node.previousCommittedRootNode?.children[0] ?? undefined\n\n    while (index < children.length || committedNode) {\n        // const newNode: FiberNode = {\n        //     type: children[index].type,\n        //     props: children[index].props,\n        //     children: children[index].children,\n        //     parent: node,\n        //     textValue: children[index].textValue ?? undefined,\n        // }\n        let newNode!: FiberNode\n        const childNode = children[index]\n        if (committedNode && committedNode.type === childNode.type) {\n            newNode = {\n                type: childNode.type,\n                effectTag: EffectTags.update,\n                props: childNode.props,\n                children: childNode.children,\n                textValue: childNode.textValue,\n                dom: committedNode.dom,\n                previousCommittedRootNode: childNode.previousCommittedRootNode,\n                parent: node,\n            }\n        }\n        if (committedNode && committedNode.type !== childNode.type) {\n            // delete old node and add new node\n            committedNode.effectTag = EffectTags.delete\n            nodesToDeleteFromDom.push(committedNode)\n            // TODO: check it\n            newNode = {\n                type: childNode.type,\n                effectTag: EffectTags.create,\n                props: childNode.props,\n                children: childNode.children,\n                textValue: childNode.textValue,\n                parent: node,\n            }\n        }\n        if (!committedNode && childNode) {\n            // add new node\n            newNode = {\n                type: childNode.type,\n                effectTag: EffectTags.create,\n                props: childNode.props,\n                children: childNode.children,\n                textValue: childNode.textValue,\n                parent: node,\n            }\n        }\n\n        if (committedNode) {\n            committedNode = committedNode.sibling\n        }\n\n        if (childNode.type)\n            if (prevSibling) {\n                prevSibling!.sibling = newNode\n            } else {\n                node.children = [newNode]\n            }\n\n        prevSibling = newNode\n        index++\n    }\n}\n\n// eslint-disable-next-line require-jsdoc\nexport function init(element: FiberNode, containerSelector: string) {\n    const domContainer: HTMLElement | null =\n        document.querySelector(containerSelector)\n    if (domContainer) {\n        appendNodeToQueue(element, domContainer)\n        requestIdleCallback(runJobQueue)\n    } else {\n        throw new Error(`Can't find element with selector ${containerSelector}`)\n    }\n}\n"],"names":[],"version":3,"file":"module.js.map"}